-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Eazy.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Eazy.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVarIdent :: Eazy.Abs.VarIdent -> Result
transVarIdent x = case x of
  Eazy.Abs.VarIdent string -> failure x

transConIdent :: Eazy.Abs.ConIdent -> Result
transConIdent x = case x of
  Eazy.Abs.ConIdent string -> failure x

transProgram :: Show a => Eazy.Abs.Program' a -> Result
transProgram x = case x of
  Eazy.Abs.ProgramT _ decls -> failure x

transLiteral :: Show a => Eazy.Abs.Literal' a -> Result
transLiteral x = case x of
  Eazy.Abs.LitInt _ integer -> failure x
  Eazy.Abs.LitTrue _ -> failure x
  Eazy.Abs.LitFalse _ -> failure x

transSimpleType :: Show a => Eazy.Abs.SimpleType' a -> Result
transSimpleType x = case x of
  Eazy.Abs.SimpleTypeT _ conident varidents -> failure x

transConstr :: Show a => Eazy.Abs.Constr' a -> Result
transConstr x = case x of
  Eazy.Abs.ConstrT _ conident types -> failure x

transType :: Show a => Eazy.Abs.Type' a -> Result
transType x = case x of
  Eazy.Abs.TypArr _ type_1 type_2 -> failure x
  Eazy.Abs.TypApp _ type_1 type_2 -> failure x
  Eazy.Abs.TypVar _ varident -> failure x
  Eazy.Abs.TypCon _ conident -> failure x
  Eazy.Abs.TypLst _ type_ -> failure x

transDecl :: Show a => Eazy.Abs.Decl' a -> Result
transDecl x = case x of
  Eazy.Abs.DeclData _ simpletype constrs -> failure x
  Eazy.Abs.DeclFunc _ varident varidents expr -> failure x
  Eazy.Abs.DeclFunT _ varident type_ -> failure x

transExpr :: Show a => Eazy.Abs.Expr' a -> Result
transExpr x = case x of
  Eazy.Abs.ExpIf _ expr1 expr2 expr3 -> failure x
  Eazy.Abs.ExpMth _ expr matchs -> failure x
  Eazy.Abs.ExpLet _ decls expr -> failure x
  Eazy.Abs.ExpLmb _ type_ varidents expr -> failure x
  Eazy.Abs.ExpOr _ expr1 expr2 -> failure x
  Eazy.Abs.ExpAnd _ expr1 expr2 -> failure x
  Eazy.Abs.ExpCmp _ expr1 cmpop expr2 -> failure x
  Eazy.Abs.ExpAdd _ expr1 addop expr2 -> failure x
  Eazy.Abs.ExpMul _ expr1 mulop expr2 -> failure x
  Eazy.Abs.ExpChn _ expr1 expr2 -> failure x
  Eazy.Abs.ExpNot _ expr -> failure x
  Eazy.Abs.ExpNeg _ expr -> failure x
  Eazy.Abs.ExpApp _ expr1 expr2 -> failure x
  Eazy.Abs.ExpLst _ exprs -> failure x
  Eazy.Abs.ExpLit _ literal -> failure x
  Eazy.Abs.ExpCon _ conident -> failure x
  Eazy.Abs.ExpVar _ varident -> failure x

transAddOp :: Show a => Eazy.Abs.AddOp' a -> Result
transAddOp x = case x of
  Eazy.Abs.OpAdd _ -> failure x
  Eazy.Abs.OpSub _ -> failure x

transMulOp :: Show a => Eazy.Abs.MulOp' a -> Result
transMulOp x = case x of
  Eazy.Abs.OpMul _ -> failure x
  Eazy.Abs.OpDiv _ -> failure x

transCmpOp :: Show a => Eazy.Abs.CmpOp' a -> Result
transCmpOp x = case x of
  Eazy.Abs.OpEq _ -> failure x
  Eazy.Abs.OpNeq _ -> failure x
  Eazy.Abs.OpGrt _ -> failure x
  Eazy.Abs.OpGeq _ -> failure x
  Eazy.Abs.OpLrt _ -> failure x
  Eazy.Abs.OpLeq _ -> failure x

transMatch :: Show a => Eazy.Abs.Match' a -> Result
transMatch x = case x of
  Eazy.Abs.MatchT _ abspattern expr -> failure x

transAbsPattern :: Show a => Eazy.Abs.AbsPattern' a -> Result
transAbsPattern x = case x of
  Eazy.Abs.PatAs _ pattern_ varident -> failure x
  Eazy.Abs.Pat _ pattern_ -> failure x

transPattern :: Show a => Eazy.Abs.Pattern' a -> Result
transPattern x = case x of
  Eazy.Abs.PatCon _ conident subpats -> failure x
  Eazy.Abs.PatLL _ pattern_1 pattern_2 -> failure x
  Eazy.Abs.PatLst _ patterns -> failure x
  Eazy.Abs.PatLit _ literal -> failure x
  Eazy.Abs.PatVar _ varident -> failure x
  Eazy.Abs.PatDef _ -> failure x

transSubPat :: Show a => Eazy.Abs.SubPat' a -> Result
transSubPat x = case x of
  Eazy.Abs.SubPat _ pattern_ -> failure x
