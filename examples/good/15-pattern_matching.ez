type Tree a = Leaf a | Node (Tree a) (Tree a);

leftHead : [Tree [a]] -> a;
leftHead lst = match lst with {
    [Leaf x] -> x;
    [Node l r] -> leftHead [l];
};

algebraicNested : Tree [Tree [a]] -> a;
algebraicNested t = match t with {
    Leaf [] -> leftHead [];
    Leaf [Leaf x] -> x;
    Leaf [Node l r] -> algebraicNested [l];
    Node l (Leaf []) -> algebraicNested l;
    Node l r -> algebraicNested r;
};

main : Bool;
main = leftHead [Leaf [1, 2, 3], Node (Leaf [4, 5, 6]) (Leaf [7, 8, 9])] == 4;
