type Tree a = Leaf a | Node (Tree a) (Tree a);

rightHead : Tree [a] -> a; 
rightHead lst = match lst with {
    Leaf (h::[]) -> h ;
    Leaf (h::t) -> rightHead (Leaf t) ;
    Node l r -> rightHead r;
};

algebraicNested : Tree [Tree [a]] -> a;
algebraicNested t = match t with {
    Leaf [] -> rightHead (Leaf []);
    Leaf [Leaf x] -> x;
    Leaf [Node l r] as d -> algebraicNested (Leaf [l]);
    Node l (Leaf []) -> algebraicNested l;
    Node l r as xd -> algebraicNested r;
};

main : Bool;
main = rightHead (Node (Leaf [4, 5, 6]) (Leaf [7, 8, 9])) == 9;
